services:
  db:
    image: postgres
    container_name: "db"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env.local
    networks:
      - db_net
  rabbitmq:
    image: rabbitmq:4.0-management
    container_name: "rabbitmq"
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - rabbitmq:/var/lib/rabbitmq/mnesia
    networks:
      - rabbitmq_net
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 15s
      timeout: 10s
      retries: 3
    env_file:
      - ./.env.local
  api:
    # use docker-compose.prod to push to dockerhub
    # image: cmaunderc/home-interface-api:1.0
    build: hub/.
    container_name: "api"
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      - 8000:8000
    env_file:
      - ./.env.local
    depends_on:
      - db
    networks:
      - db_net
    develop:
      watch:
        - action: sync
          path: ./hub
          target: /code/
  daemon:
    # use docker-compose.prod to push to dockerhub
    # image: cmaunderc/home-interface-daemon:1.0
    build:
      context: hub/.
      dockerfile: workers/Dockerfile
    container_name: "daemon"
    env_file:
      - ./.env.local
    networks:
      - rabbitmq_net
      - db_net
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_started
  ui:
    container_name: ui
    build:
      context: ./ui
      dockerfile: Dockerfile
    env_file:
      - .env.local
    volumes:
      - ./ui/app:/app/app
      - ./ui/public:/app/public
    restart: always
    ports:
      - 3000:3000
    networks:
      - ui_net
networks:
  db_net:
    driver: bridge
  rabbitmq_net:
    driver: bridge
  ui_net:
    external: true

volumes:
  postgres_data:
  rabbitmq:
    driver: local
